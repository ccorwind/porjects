import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;

public class Main implements MouseListener{

	private boolean token1 = false;
	private DrawPanel gamePane;
	private ship carrier1, carrier2;
	private ship battleship1, battleship2;
	private ship cruiser1, cruiser2;
	private ship submarine1, submarine2;
	private ship destroyer1, destroyer2;
	private bomb[] ammo;
	private int shotsf = -1, shipPlace = 0 , gamePhase = 0;
	private JLabel sL = new JLabel(""), tL = new JLabel(""), mL = new JLabel("");
	private String p1t = "Your Turn", p2t = "Their Turn";
	private ImageIcon iShipVer, iShipHor, iShip;
	private Image imgVer, imgHor, newImg; 
	String player = "";
	private Main() {
		int host = JOptionPane.showConfirmDialog (null, "Are you the host?");
		if(host == 0){player = "HOST";}
		else if (host == 1){player = "CLIENT";}
		if (player == "HOST" || player == "CLIENT"){phase0();}
		else{System.exit(0);}
	}
	private void phase0(){
		JFrame conv = new JFrame("BATTLESHITE");

		gamePane = new DrawPanel();

		JPanel labels = new JPanel(new FlowLayout());
		
		conv.setPreferredSize(new Dimension(960, 550));
		gamePane.setPreferredSize(new Dimension(960, 540));
		conv.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		conv.setResizable(false);
		ToolTipManager.sharedInstance().setInitialDelay(5000);
		
		iShipVer = new ImageIcon(Main.class.getResource("/shipVer.png"));
		iShipHor = new ImageIcon(Main.class.getResource("/shipHor.png"));
		imgVer = iShipVer.getImage();
		iShipVer.setImage(imgVer.getScaledInstance(60, (60*5), java.awt.Image.SCALE_SMOOTH));
		imgHor = iShipHor.getImage();
		iShipHor.setImage(imgHor.getScaledInstance((60*5), 60, java.awt.Image.SCALE_SMOOTH));
		
		carrier1 = new ship(-1000,-1000, 5, iShipVer, iShipHor); carrier2 = new ship(-1000,-1000, 5, iShipVer, iShipHor);
		
		battleship1 = new ship(-1000,-1000, 4, iShipVer, iShipHor); battleship2 = new ship(-1000,-1000, 4, iShipVer, iShipHor);
		
		cruiser1 = new ship(-1000,-1000, 3, iShipVer, iShipHor); cruiser2 = new ship(-1000,-1000, 3, iShipVer, iShipHor);
		submarine1 = new ship(-1000,-1000, 3, iShipVer, iShipHor); submarine2 = new ship(-1000,-1000, 3, iShipVer, iShipHor);
		
		destroyer1 = new ship(-1000,-1000, 2, iShipVer, iShipHor); destroyer2 = new ship(-1000,-1000, 2, iShipVer, iShipHor);
		if(player == "HOST"){
			sL.setText("YOUR BOARD | ");
			mL.setText(" | THEIR BOARD");
		}else if (player == "CLIENT"){
			sL.setText("THEIR BOARD | ");
			mL.setText(" | YOUR BOARD");
		}
		tL.setText("Set up your Ships!");
		
		sL.setFont(new Font("Yoyo", Font.BOLD, 24));
		tL.setFont(new Font("Yoyo", Font.BOLD, 24));
		mL.setFont(new Font("Yoyo", Font.BOLD, 24));
		labels.add(sL);
		labels.add(tL);
		labels.add(mL);
	

		conv.add(labels, BorderLayout.NORTH);
		conv.add(gamePane, BorderLayout.CENTER);

		conv.isResizable();
		conv.pack();
		conv.setVisible(true);
		conv.setBackground(Color.DARK_GRAY);
		gamePane.addMouseListener(this);
		
		

	}

	private void phase1(){
		tL.setText("IF YOUR SEEING THIS SOMETHING IS BROKEN");
		sL.setText("HOW BOARD? ");
		mL.setText("SO BOARD!");
		if(player == "HOST"){
			tL.setText(p1t);
		}else if (player == "CLIENT"){
			tL.setText(p2t);
		}
	}
	
	private void setShips(){
		if(player == "HOST"){
			carrier1.rotate(); battleship1.rotate(); cruiser1.rotate(); submarine1.rotate(); destroyer1.rotate();
		}else if(player == "CLIENT"){
			carrier2.rotate(); battleship2.rotate(); cruiser2.rotate(); submarine2.rotate(); destroyer2.rotate();
		}
	}
	
	private class ship {
		private int x, y, health;
		private ImageIcon n;
		private ImageIcon imgVer;
		private ImageIcon imgHor;
		private boolean dead = false;
		//so im thinking we have an array of tiles and when a tile is hit it finds its corrasponding ship
		// this ship then "takes a hit" and we subtract one from its health.
		// at 0 health the ship is destroyed, also tiles onces triggered are brought out of the arry
		//this way they don't double trigger and just one lucky shot slowly kills the enemy.
		// then each ship could effect the health of a player
		// or we could have an array of ships and when empty you lose

		public ship(int x, int y, int health, ImageIcon imgVer, ImageIcon imgHor) {
			this.x = x;
			this.y = y;
			this.imgVer = imgVer;
			this.imgHor = imgHor;
			this.health = health;
			this.n = imgVer;
		}

		public int getx() {

			return x;
		}

		public int gety() {

			return y;
		}
		public int getHealth(){
			return health;
		}

		public void setx(int z) {
			x = z;
		}

		public void sety(int z) {
			y = z;
		}
		
		public void setXY(int z1, int z2){
		x = z1; y = z2;
		}
		
		public void setHealth(int z){
			health = z;
		}

		public void rotate() {
			if (token1 == false){n = imgHor; token1 = true;}
			else{n = imgVer; token1 = false;}
		}

		public void paint(Graphics g) {
			g.drawImage(n.getImage(), x, y, null);
		}
	}
	
	private int calculateSpaceX(int z){
		int space = 0;
		for (int x = 0; x < 960; x += 60) {
			if (x < z && z < (x+60)){
				return (space * 60);
			}
			else space = space + 1;
		}
		JOptionPane.showMessageDialog(null,
				"Somethings fucky!");
		return -1;
	}
	private int calculateSpaceY(int z){
		int space = 0;
		for (int x = 0; x < 540; x += 60) {
			if (x < z && z < (x+60)){
				return (space * 60);
			}
			else space = space + 1;
		}
		JOptionPane.showMessageDialog(null,
				"Somethings fucky!");
		return -1;
	}


	private class bomb {
		private int x;
		private int y;
		private ImageIcon n;

		public bomb(int x, int y, ImageIcon ibomb) {
			this.x = x;
			this.y = y;
			this.n = ibomb;
		}

		public void paint(Graphics g) {
			g.drawImage(n.getImage(), x, y, null);}
		}
	
	private void endgames() {
		
		//just make endgames do everything it already repaints it just needs to 
		//add the damage marker and do the math.
		if (carrier1.health == 0){carrier1.dead = true;} if (carrier2.health == 0){carrier2.dead = true;}
		if (battleship1.health == 0){battleship1.dead = true;} if (battleship2.health == 0){battleship2.dead = true;}
		if (cruiser1.health == 0){cruiser1.dead = true;} if (cruiser2.health == 0){cruiser2.dead = true;}
		if (submarine1.health == 0){submarine1.dead = true;} if (submarine2.health == 0){submarine2.dead = true;}
		if (destroyer1.health == 0){destroyer1.dead = true;} if (destroyer2.health == 0){destroyer2.dead = true;}
		
		if ( carrier1.dead && battleship1.dead && cruiser1.dead && submarine1.dead && destroyer1.dead) {
			JOptionPane.showMessageDialog(null,
					"Player 1's ships have been sunk! Player 2 has won!");
			gamePhase++;
		} else if (carrier2.dead && battleship2.dead && cruiser2.dead && submarine2.dead && destroyer2.dead) {
			JOptionPane.showMessageDialog(null,
					"Player 2's ships have been sunk! Player 1 has won!");
			gamePhase++;
		}
		gamePane.repaint();
	}

	private class DrawPanel extends JPanel {
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			super.setBackground(new Color(0, 49, 83));

			carrier1.paint(g); carrier2.paint(g);
			battleship1.paint(g); battleship2.paint(g);
			cruiser1.paint(g); cruiser2.paint(g);
			submarine1.paint(g); submarine2.paint(g);
			destroyer1.paint(g); destroyer2.paint(g);
			
			if(gamePhase == 1 || gamePhase == 0){
				if(player == "HOST"){
					g.fillRect(480, 0, 920, 600);
				}else if(player == "CLIENT"){
					g.fillRect(0, 0, 480, 600);
				}
			}
			g.setColor(Color.GRAY);
			for (int x = 60; x < 960; x += 60) {
				g.drawLine(x, 0, x, 550);
				g.drawLine(0, x, 960, x);
			}
			for (int e = -1; e < shotsf; e++) {
				if (ammo[e + 1] != null) {
					ammo[e + 1].paint(g);
				}
			}
		}
	}

	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e1) {
		}
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new  Main();
			}
		});
		
	}

	public void mouseClicked(MouseEvent e) {
		Point z = new Point(calculateSpaceX(e.getX()),  calculateSpaceY(e.getY()));
		System.out.print(gamePhase);
		if(gamePhase == 0){
			if(player == "HOST"){
				if(shipPlace == 0){
				carrier1.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 1){
				battleship1.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 2){
				cruiser1.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 3){
				submarine1.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 4){
				destroyer1.setXY(z.x, z.y);
				gamePhase = 1;
				}
			} else if(player == "CLIENT"){
				if(shipPlace == 0){
				carrier2.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 1){
				battleship2.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 2){
				cruiser2.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 3){
				submarine2.setXY(z.x, z.y);
				shipPlace++;
				}else
				if(shipPlace == 4){
				destroyer2.setXY(z.x, z.y);
				gamePhase = 1;
				}
			}
		}else if(gamePhase == 1){
		//bombshiz
		}
		gamePane.repaint();
}

	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
	public void mousePressed(MouseEvent e) {}
	public void mouseReleased(MouseEvent e) {}
}
